{
  "swagger": "2.0",
  "info": {
    "description": "This is a sample user-hobbies management server.",
    "version": "1.0.0",
    "title": "This a sample server"
  },
  "basePath": "/",
  "tags": [
    {
      "name": "user",
      "description": "Access to users"
    },
    {
      "name": "hobby",
      "description": "Manipulate hobbies"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/users": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get all users",
        "description": "Get all users with an array of hobbies if present otherwise empty array.",
        "operationId": "getAllUsers",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Adds a new user",
        "description": "",
        "operationId": "addUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object that needs to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostUserRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Failed. Bad user data / User name already exists.",
            "schema": {
              "$ref": "#/definitions/ErrorApiResponse"
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "parameters": [
        {
          "name": "userId",
          "in": "path",
          "required": true,
          "description": "ID of the user to get or update",
          "type": "string"
        }
      ],
      "get": {
        "tags": [
          "user"
        ],
        "summary": "User with given ID",
        "description": "Returns a single user",
        "operationId": "getUserById",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/ErrorApiResponse"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/ErrorApiResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Deletes a user",
        "operationId": "deleteUser",
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "User deleted"
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/ErrorApiResponse"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/ErrorApiResponse"
            }
          }
        }
      },
      "patch": {
        "summary": "Update a user name with given ID",
        "tags": [
          "user"
        ],
        "operationId": "updateUserName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object that needs to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User updated"
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/ErrorApiResponse"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/ErrorApiResponse"
            }
          }
        }
      }
    },
    "/users/{userId}/hobbies": {
      "parameters": [
        {
          "name": "userId",
          "in": "path",
          "required": true,
          "description": "ID of the user that belongs to the hobby",
          "type": "string"
        }
      ],
      "post": {
        "tags": [
          "hobby"
        ],
        "summary": "Assign a hobby to a user",
        "description": "",
        "operationId": "addHobbyToUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Hobby object that needs to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Hobby"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Hobby assigned to user",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid User ID supplied or hobby already exists on User (change the hobby name)",
            "schema": {
              "$ref": "#/definitions/ErrorApiResponse"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/ErrorApiResponse"
            }
          }
        }
      }
    },
    "/users/{userId}/hobbies/{hobbyId}": {
      "parameters": [
        {
          "name": "userId",
          "in": "path",
          "required": true,
          "description": "ID of the user that belongs to the hobby",
          "type": "string"
        },
        {
          "name": "hobbyId",
          "in": "path",
          "required": true,
          "description": "ID of the hobby",
          "type": "string"
        }
      ],
      "delete": {
        "tags": [
          "hobby"
        ],
        "summary": "Deletes a hobby and revoke it from the corresponding user",
        "operationId": "deleteUserHobby",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Hobby deleted and revoked"
          },
          "400": {
            "description": "Invalid hobby ID or user ID ",
            "schema": {
              "$ref": "#/definitions/ErrorApiResponse"
            }
          },
          "404": {
            "description": "User or hobby not found ",
            "schema": {
              "$ref": "#/definitions/ErrorApiResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "required": [
        "_id",
        "name"
      ],
      "properties": {
        "_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "hobbies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Hobby"
          }
        }
      }
    },
    "Hobby": {
      "type": "object",
      "required": [
        "_id",
        "name",
        "passionLevel",
        "year"
      ],
      "properties": {
        "_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "passionLevel": {
          "type": "string",
          "description": "notes the passion level of the corresponding user",
          "enum": [
            "Low",
            "Medium",
            "High",
            "Very-High"
          ]
        },
        "year": {
          "type": "integer",
          "description": "notes the year starting practicing this hobby",
          "minimum": 1900,
          "maximum": 2020
        }
      }
    },
    "Users": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/User"
      }
    },
    "PostUserRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "ErrorApiResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        }
      }
    }
  }
}